import java.io.IOException;
import java.io.InputStream;
import java.util.InputMismatchException;
class ADASCOOL 
{
	private static InputReader in = new InputReader(System.in);
	public static void main(String[] args)throws Exception
	{
		int N = in.readInt();
		char matrix [][] = new char[N][N];
		for(int i =0;i<N;i++)
		{
			for(int j =0;j<N;j++)
			{
				char a = (char)in.readChar();
				if(a=='#')
				{
					j--;
					continue;
				}
				else
					matrix[i][j] = a;

			}
		}
		char [] input = in.readString().toCharArray();
		System.out.println(fn(matrix,input,N));


	} 

	public static int fn(char[][]matrix, char input[], int N)
	{
		int occurence=0;
		for( int i=0;i<N;i++)
		{
			for(int j=0;j<N;j++)
			{
				int index = 0;
				if(matrix[i][j]==input[index])
				{
					if(check_horizontal(matrix,input,N,i,j)==true)
					{
						occurence++;
					}
					if(check_vertical(matrix,input,N,i,j)==true)
					{
						occurence++;
					}
					if(check_diagonal_upward(matrix,input,N,i,j)==true)
					{
						occurence++;
					}
					if(check_diagonal_downward(matrix,input,N,i,j)==true)
					{
						occurence++;
					}
				} 
			}
		}
		return occurence;
	}

	public static boolean check_horizontal(char[][]matrix, char input[], int N, int x, int y)
	{
		int ind = 0,tmp=0;

		while(y<N && ind<N)
		{
			if(matrix[x][y]==input[ind])
			{
				ind++;
				y++;
				tmp++;
			}
			else
			{
				return false;
			}
		}

		if(tmp==N)
			return true;
		else
			return false;
	}

	public static boolean check_vertical(char[][]matrix, char input[], int N,int x, int y)
	{
		int ind = 0,tmp=0;

		while(x<N && ind<N)
		{
			if(matrix[x][y]==input[ind])
			{
				ind++;
				x++;
				tmp++;
			}
			else
			{
				return false;
			}
		} 
		if(tmp==N)
			return true;
		else
			return false;

	}


	public static boolean check_diagonal_upward(char[][]matrix, char input[], int N,int x, int y)
	{
		int ind = 0,tmp=0;

		while(x>=0 && y<N && ind<N)
		{
			if(matrix[x][y]==input[ind])
			{
				ind++;
				x--;
				y++;
				tmp++;
			}
			else
			{
				return false;
			}
		} 
		if(tmp==N)
			return true;
		else
			return false;

	}

	public static boolean check_diagonal_downward(char[][]matrix, char input[], int N,int x, int y)
	{
		int ind = 0,tmp=0;
		while(x<N && y<N && ind<N)
		{
			if(matrix[x][y]==input[ind])
			{
				ind++;
				x++;
				y++;
				tmp++;
			}
			else
			{
				return false;
			}
		} 
		if(tmp==N)
			return true;
		else
			return false;
	}
	private static class InputReader {
		private InputStream stream;
		private byte[] buffer;
		private int currentIndex;
		private int bytesRead;
		public InputReader(InputStream stream) {
			this.stream = stream;
			buffer = new byte[131072];
		} 
		public InputReader(InputStream stream, int bufferSize) {
			this.stream = stream;
			buffer = new byte[bufferSize];
		}
		private int read() throws IOException {
			if (currentIndex >= bytesRead) {
				currentIndex = 0;
				bytesRead = stream.read(buffer);
				if (bytesRead <= 0) {
					return -1;
				}
			}
			return buffer[currentIndex++];
		}
		public int readChar() throws IOException {
			int c = read();
			while (!isPrintable(c)) {
				c = read();
			}
			return c;
		}
		public String readString() throws IOException {
			int c = read();
			while (!isPrintable(c)) {
				c = read();
			}
			StringBuilder result = new StringBuilder();
			do {
				result.appendCodePoint(c);
				c = read();
			} while (isPrintable(c));
			return result.toString();
		}
		public int readInt() throws Exception {
			int c = read();
			int sign = 1;
			while (!isPrintable(c)) {
				c = read();
			}
			if (c == '-') {
				sign = -1;
				c = read();
			}
			int result = 0;
			do {
				if ((c < '0') || (c > '9')) {
					throw new InputMismatchException();
				}
				result *= 10;
				result += (c - '0');
				c = read();
			} while (isPrintable(c));
			return sign * result;
		}
		public long readLong() throws Exception {
			int c = read();
			int sign = 1;
			while (!isPrintable(c)) {
				c = read();
			}
			if (c == '-') {
				sign = -1;
				c = read();
			}
			long result = 0;
			do {
				if ((c < '0') || (c > '9')) {
					throw new InputMismatchException();
				}
				result *= 10;
				result += (c - '0');
				c = read();
			} while (isPrintable(c));
			return sign * result;
		}
		public double readDouble() throws Exception {
			int c = read();
			int sign = 1;
			while (!isPrintable(c)) {
				c = read();
			}
			if (c == '-') {
				sign = -1;
				c = read();
			}
			boolean fraction = false;
			double multiplier = 1;
			double result = 0;
			do {
				if ((c == 'e') || (c == 'E')) {
					return sign * result * Math.pow(10, readInt());
				}
				if ((c < '0') || (c > '9')) {
					if ((c == '.') && (!fraction)) {
						fraction = true;
						c = read();
						continue;
					}
					throw new InputMismatchException();
				}
				if (fraction) {
					multiplier /= 10;
					result += (c - '0') * multiplier;
					c = read();
				} else {
					result *= 10;
					result += (c - '0');
					c = read();
				}
			} while (isPrintable(c));
			return sign * result;
		}
		private boolean isPrintable(int c) {
			return ((c > 32) && (c < 127));
		}
	}

}
